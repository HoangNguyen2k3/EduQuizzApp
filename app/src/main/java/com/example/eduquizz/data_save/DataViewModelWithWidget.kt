package com.example.eduquizz.data_save

import android.content.Context
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Card
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.glance.LocalContext
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.eduquizz.features.widget.StreakManager
import com.example.eduquizz.features.widget.WidgetUpdateManager
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * Integration example cho DataViewModel v·ªõi Widget system
 * Th√™m c√°c methods n√†y v√†o DataViewModel hi·ªán t·∫°i c·ªßa b·∫°n
 */
@HiltViewModel
class DataViewModelWithWidget @Inject constructor(
    @ApplicationContext private val context: Context
    // ... existing dependencies
) : ViewModel() {

    // Existing properties
    private val _streak = MutableStateFlow(0)
    val streak: StateFlow<Int> = _streak

    init {
        // Load streak khi kh·ªüi t·∫°o
        loadStreak()
    }

    /**
     * Load streak t·ª´ SharedPreferences
     */
    private fun loadStreak() {
        viewModelScope.launch {
            val currentStreak = StreakManager.getCurrentStreak(context)
            _streak.value = currentStreak
        }
    }

    /**
     * C·∫≠p nh·∫≠t streak khi user s·ª≠ d·ª•ng app
     * G·ªçi method n√†y trong MainActivity.onCreate()
     */
    fun updateDailyStreak() {
        viewModelScope.launch {
            StreakManager.updateStreak(context)
            val newStreak = StreakManager.getCurrentStreak(context)
            _streak.value = newStreak
        }
    }

    /**
     * Th√™m bonus streak (v√≠ d·ª•: ho√†n th√†nh challenges)
     */
    fun addStreakBonus(bonus: Int) {
        viewModelScope.launch {
            StreakManager.addStreakBonus(context, bonus)
            val newStreak = StreakManager.getCurrentStreak(context)
            _streak.value = newStreak
        }
    }

    /**
     * G·ªçi khi user ho√†n th√†nh m·ªôt game/activity
     * ƒê·∫£m b·∫£o widget ƒë∆∞·ª£c update
     */
    fun onActivityCompleted(activityType: String) {
        viewModelScope.launch {
            // Update streak n·∫øu c·∫ßn
            if (StreakManager.getStreakInfo(context).needsUpdate) {
                updateDailyStreak()
            }

            // Update t·∫•t c·∫£ widgets
            WidgetUpdateManager.updateAllWidgets(context)

            // Log activity completion
            println("Activity completed: $activityType, Current streak: ${_streak.value}")
        }
    }

    /**
     * Reset streak (d√πng cho testing ho·∫∑c user request)
     */
    fun resetStreak() {
        viewModelScope.launch {
            StreakManager.resetStreak(context)
            _streak.value = 0
        }
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ streak
     */
    fun getStreakInfo() = StreakManager.getStreakInfo(context)
}

/**
 * Extension functions ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng trong Composables
 */

// S·ª≠ d·ª•ng trong MainActivity
fun DataViewModel.initializeWidgetSystem(context: Context) {
    // Update streak khi app ƒë∆∞·ª£c m·ªü
    StreakManager.updateStreak(context)

    // Schedule periodic updates
    WidgetUpdateManager.scheduleWidgetUpdates(context)
}

// S·ª≠ d·ª•ng khi ho√†n th√†nh game
fun DataViewModel.notifyGameCompletion(context: Context, gameType: String) {
    // Update streak n·∫øu c·∫ßn
    val info = StreakManager.getStreakInfo(context)
    if (info.needsUpdate) {
        StreakManager.updateStreak(context)
    }

    // Update widgets
    WidgetUpdateManager.updateAllWidgets(context)
}

/**
 * Composable ƒë·ªÉ hi·ªÉn th·ªã streak trong app
 */
@Composable
fun StreakDisplay(viewModel: DataViewModel) {
    val context = LocalContext.current
    val streakInfo = remember { StreakManager.getStreakInfo(context) }

    Card (
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Row(
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column {
                Text(
                    text = "Current Streak",
                    style = MaterialTheme.typography.titleMedium
                )
                Text(
                    text = if (streakInfo.isActive) "Keep it up!" else "Start your streak today!",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "${streakInfo.currentStreak}",
                    style = MaterialTheme.typography.headlineLarge,
                    color = MaterialTheme.colorScheme.primary
                )
                Text(
                    text = " üî•",
                    style = MaterialTheme.typography.headlineMedium
                )
            }
        }
    }
}